import React, { useRef, useEffect } from "react";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";
import { toast, ToastContainer } from "react-toastify";
import 'react-toastify/dist/ReactToastify.css';

// Import chart components
import RequestVolume from "./RequestVolume";
import SuccessRateTrends from "./SuccessRateTrends";
import LatencyDistribution from "./LatencyDistribution";
import PerformanceAnalytics from "./PerformanceAnalytics";
import ProcessingDistributionChart from "./ProcessingDistributionChart";

// Import watermark image
import watermarkImage from "../icons/watermark.png";

const HandleExport = ({ exportRef, metrics, stats, summary_metrics, newmetrics }) => {
  const printRef = useRef();

  useEffect(() => {
    if (exportRef) {
      exportRef.current = handleDownload;
    }
  }, [exportRef]);

  const loadWatermarkImage = () => {
    return new Promise((resolve) => {
      const img = new Image();
      img.src = watermarkImage;
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/png'));
      };
    });
  };

  const addWatermarkToPage = (pdf, watermarkData) => {
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Add watermark with opacity
    pdf.setGState(new pdf.GState({ opacity: 0.1 }));
    pdf.addImage(
      watermarkData,
      'PNG',
      pageWidth / 2 - 30,
      pageHeight / 2 - 30,
      70,
      70,
      undefined,
      'FAST'
    );
    pdf.setGState(new pdf.GState({ opacity: 1 }));
  };

  const addPageBorder = (pdf) => {
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    // Draw border around the entire page
    pdf.setDrawColor(200, 200, 200); // Light gray color
    pdf.setLineWidth(0.5); // Thin border
    pdf.rect(5, 5, pageWidth - 10, pageHeight - 10);
  };

  const handleDownload = async () => {
    try {
      const canvas = await html2canvas(printRef.current, {
        scale: 2,
        useCORS: true,
        scrollY: -window.scrollY,
        backgroundColor: "#fff",
        allowTaint: true,
      });

      const imgData = canvas.toDataURL("image/png");
      const watermarkData = await loadWatermarkImage();

      const imgWidth = 210; 
      const pageHeight = 297; 
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      let heightLeft = imgHeight;
      let position = 0;
      const pdf = new jsPDF("p", "mm", "a4");

      pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
      addWatermarkToPage(pdf, watermarkData);
      addPageBorder(pdf);
      heightLeft -= pageHeight;

      while (heightLeft > 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, "PNG", 0, position, imgWidth, imgHeight);
        addWatermarkToPage(pdf, watermarkData);
        addPageBorder(pdf);
        pdf.setFontSize(10);
        pdf.setTextColor(120);
        pdf.text(
          "--- Generated By Face Recognition Dashboard ---",
          imgWidth / 2,
          pageHeight - 15,
          { align: "center" }
        );
        heightLeft -= pageHeight;

      }

      // const dateStr = new Date().toLocaleDateString();
      // pdf.setFontSize(10);
      // pdf.setTextColor(150);
      // pdf.text(
      //   `Generated on ${dateStr}`,
      //   pdf.internal.pageSize.getWidth() / 2,
      //   pdf.internal.pageSize.getHeight() - 10,
      //   { align: "center" }
      // );

      pdf.save(`face-dashboard-report-${new Date().toISOString().slice(0, 10)}.pdf`);

      toast.success("Successfully downloaded!", {
        position: "top-right",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        style: {
          backgroundColor: "#d4edda",
          color: "#155724",
          fontWeight: "bold",
        },
      });

    } catch (err) {
      console.error("PDF export error:", err);
      toast.error("‚ùå Failed to download PDF.", {
        position: "top-right",
      });
    }
  };

  return (
    <>
      <ToastContainer />
      <div
        style={{
          position: "absolute",
          top: "-9999px",
          left: "-9999px",
          width: "794px",
          padding: "40px",
          backgroundColor: "#ffffff",
          boxSizing: "border-box",
        }}
        ref={printRef}
      >

        <div
          style={{
            padding: "30px",
            borderRadius: "8px",
          }}
        >
          <div
            style={{
              textAlign: "center",
              marginBottom: "30px",
              borderBottom: "1px solid #eee",
              paddingBottom: "20px",
            }}
          >
            <div className="icon-circle">
              <img
                src={require('../icons/logo.png')}
                alt="Dashboard Icon"
                style={{ width: 50, height: 50, marginTop: "120px", marginLeft: "100px" }}
              />
            </div>
            <h1
              style={{
                color: "#2c3e50",
                margintop: 0,
                fontSize: "28px",
                fontWeight: "600",
              }}
            >
              Face Recognition Dashboard Report
            </h1>
            <p
              style={{
                color: "#7f8c8d",
                margin: "5px 0 0",
                fontSize: "14px",
              }}
            >
              {new Date().toLocaleDateString("en-US", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </p>
          </div>

          <div style={{ marginBottom: "10px" }}>
            <h2 style={sectionTitleStyle}>Request Volume Metrics</h2>
            <RequestVolume metrics={metrics} />
          </div>

          <div style={{ marginBottom: "30px" }}>
            <h2 style={sectionTitleStyle}>Processing Distribution Chart</h2>
            <ProcessingDistributionChart metrics={metrics} />
          </div>

          <div style={{ marginTop: "50px", marginBottom: "30px" }}>
            <h2 style={sectionTitleStyle}>Success Rate Trends</h2>
            <SuccessRateTrends metrics={metrics?.success_trends || []} />
          </div>

          <div style={{ marginBottom: "60px" }}>
            <h2 style={sectionTitleStyle}>Latency Distribution</h2>
            <LatencyDistribution metrics={metrics?.latency_distribution || []} />
          </div>

          <div style={{ marginTop: "330px", marginBottom: "20px" }}>
            <h2 style={sectionTitleStyle}>Overall Metrics</h2>
            <table style={tableStyle}>
              <thead>
                <tr>
                  <th style={thStyle}>Metric</th>
                  <th style={thStyle}>Value</th>
                </tr>
              </thead>
              <tbody>
                {newmetrics &&
                  Object.entries(newmetrics).map(([key, value], idx) => (
                    <tr key={`metric-${idx}`}>
                      <td style={tdStyle}>{key}</td>
                      <td style={tdStyle}>{value}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
          <div style={{ marginTop: "300px", marginBottom: "30px" }}>
            <h2 style={sectionTitleStyle}>System Stats Summary</h2>
            <table style={tableStyle}>
              <thead>
                <tr>
                  <th style={thStyle}>Label</th>
                  <th style={thStyle}>Value</th>
                  <th style={thStyle}>Details</th>
                </tr>
              </thead>
              <tbody>
                {stats.map((item, idx) => {
                  const label = item.label || Object.keys(item)[0];
                  const value = item.value || item[label] || "-";
                  const sub = item.sub || Object.entries(item)
                    .filter(([key]) => !['label', 'value'].includes(key))
                    .map(([k, v]) => `${k}: ${v}`).join(", ");

                  return (
                    <tr key={idx}>
                      <td style={tdStyle}>{label}</td>
                      <td style={tdStyle}>{value}</td>
                      <td style={tdStyle}>{sub || "-"}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          <div style={{ marginBottom: "30px" }}>
            <h2 style={sectionTitleStyle}>Summary Metrics</h2>
            <table style={tableStyle}>
              <thead>
                <tr>
                  <th style={thStyle}>Metric</th>
                  <th style={thStyle}>Value</th>
                </tr>
              </thead>
              <tbody>
                {summary_metrics &&
                  Object.entries(summary_metrics).map(([key, value], idx) => (
                    <tr key={`summary-${idx}`}>
                      <td style={tdStyle}>{key}</td>
                      <td style={tdStyle}>{value}</td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>

          {/* <div
            style={{
              marginTop: "30px",
              paddingTop: "20px",
              borderTop: "1px solid #eee",
              textAlign: "center",
              color: "#95a5a6",
              fontSize: "12px",
            }}
          >
            <p>Generated by Face Recognition Dashboard</p>
          </div> */}
        </div>
      </div>
    </>
  );
};

const sectionTitleStyle = {
  color: "#34495e",
  fontSize: "20px",
  borderBottom: "1px solid #eee",
  paddingBottom: "8px",
  marginBottom: "15px",
};

const tableStyle = {
  width: "100%",
  borderCollapse: "collapse",
  marginTop: "10px",
};

const thStyle = {
  border: "1px solid #ddd",
  padding: "8px",
  backgroundColor: "#f2f2f2",
  textAlign: "left",
  fontWeight: "bold",
};

const tdStyle = {
  border: "1px solid #ddd",
  padding: "8px",
  fontSize: "14px",
};

export default HandleExport;